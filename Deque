#include <iostream>
#include <deque> 
#include <algorithm>
using namespace std;
void printKMax(int arr[], int n, int k){

    // Attempt 3 /////////////////////////
    
    std::deque<int>  dq;
    int i;
 
    // Process first k elements of array
    for (i = 0; i < k; i++)
    {
        // For every element, the previous smaller elements are useless so
        // remove them from Qi
        while ( (!dq.empty()) && arr[i] >= arr[dq.back()])
            dq.pop_back();  // Remove from rear
        
        dq.push_back(i);
    }
 
    // Process rest of the elements
    for (i = k ; i < n; i++)
    {
        // The element at the front of the queue is the largest element of
        // previous window, so print it
        cout << arr[dq.front()] << " ";
 
        // Remove the elements which are out of this window
        while ( (!dq.empty()) && dq.front() <= i - k)
            dq.pop_front();  // Remove from front of queue
 
        // Remove all elements smaller than the currently
        // being added element (remove useless elements)
        while ( (!dq.empty()) && arr[i] >= arr[dq.back()])
            dq.pop_back();
 
        dq.push_back(i);
    }
 
    // Print the maximum element of last window
    cout << arr[dq.front()];
    
    // Attempt 2 /////////////////////////
    
    deque <int> dq;
    int i = 0;
    vector <int> max;
    
    while (i < k) {
        dq.push_back(arr[i]);
        i++;
    }
    max.push_back(*std::max_element(dq.begin(),dq.end()));
    k++;
    
    while (k <= n) {
        
        dq.pop_front();
        dq.push_back(arr[i++]);
        
        max.push_back(*std::max_element(dq.begin(),dq.end()));
        
        k++;
    }

    i = 0;
    for (std::vector<int>::const_iterator j = max.begin(); j != max.end(); ++j)
        std::cout << *j << ' ';
    
    cout << "\n";
    
    // Attempt 1 /////////////////////////
    
    deque <int> dq;
    int i = n/k, lb = 0;
    int max[i];
    
    while (k <= n) {
        
        for (i = lb; i < k; i++) {
            dq.push_back(arr[i]);
        }
        
        i = 0;
        max[i] = *std::max_element(dq.begin(),dq.end());
        dq.clear();
        
        i++;
        lb++;
        k++;
    }
    
    i = 0;
    while (i < sizeof(max)) {
        printf("%d ", max[i]);
        i++;
    }
    
    printf("\n");
}

int main(){
  
   int t;
   cin >> t;
   while(t>0) {
      int n,k;
       cin >> n >> k;
       int i;
       int arr[n];
       for(i=0;i<n;i++)
            cin >> arr[i];
       printKMax(arr, n, k);
       t--;
     }
     return 0;
}
